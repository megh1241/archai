{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d6fa8b24",
   "metadata": {},
   "source": [
    "# Search Algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1b103993",
   "metadata": {},
   "outputs": [],
   "source": [
    "from overrides import overrides\n",
    "import torch\n",
    "from torch import nn\n",
    "import numpy as np\n",
    "import json\n",
    "from typing import Tuple\n",
    "from random import Random\n",
    "\n",
    "from typing import Tuple, List, Optional\n",
    "from archai.discrete_search import ArchaiModel, EvolutionarySearchSpace, BayesOptSearchSpace"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f81488a6",
   "metadata": {},
   "source": [
    "We will re-use the CNN search space created in the [search space example](./search_space.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b7ac3c7",
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "class MyModel(nn.Module):\n",
    "    def __init__(self, nb_layers: int = 5, kernel_size: int = 3, hidden_dim: int = 32):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.nb_layers = nb_layers\n",
    "        self.kernel_size = kernel_size\n",
    "        self.hidden_dim = hidden_dim\n",
    "        \n",
    "        layer_list = []\n",
    "\n",
    "        for i in range(nb_layers):\n",
    "            in_ch = (1 if i == 0 else hidden_dim)\n",
    "            \n",
    "            layer_list += [\n",
    "                nn.Conv2d(in_ch, hidden_dim, kernel_size=kernel_size, padding=(kernel_size-1)//2),\n",
    "                nn.BatchNorm2d(hidden_dim),\n",
    "                nn.ReLU(),\n",
    "            ]\n",
    "            \n",
    "        layer_list += [\n",
    "            nn.AdaptiveAvgPool2d(output_size=(1, 1)),\n",
    "            nn.Conv2d(hidden_dim, 10, kernel_size=1)\n",
    "        ]\n",
    "\n",
    "        self.model = nn.Sequential(*layer_list)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.model(x).squeeze()\n",
    "    \n",
    "    def get_archid(self):\n",
    "        return f'({self.nb_layers}, {self.kernel_size}, {self.hidden_dim})'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9580e53f",
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "class CNNSearchSpace(EvolutionarySearchSpace, BayesOptSearchSpace):\n",
    "    def __init__(self, min_layers: int = 1, max_layers: int = 12,\n",
    "                 kernel_list=(1, 3, 5, 7), hidden_list=(16, 32, 64, 128),\n",
    "                 seed: int = 1):\n",
    "\n",
    "        self.min_layers = min_layers\n",
    "        self.max_layers = max_layers\n",
    "        self.kernel_list = kernel_list\n",
    "        self.hidden_list = hidden_list\n",
    "        \n",
    "        self.rng = Random(seed)\n",
    "        \n",
    "    @overrides\n",
    "    def random_sample(self) -> ArchaiModel:\n",
    "        # Randomly chooses architecture parameters\n",
    "        nb_layers = self.rng.randint(self.min_layers, self.max_layers)\n",
    "        kernel_size = self.rng.choice(self.kernel_list)\n",
    "        hidden_dim = self.rng.choice(self.hidden_list)\n",
    "        \n",
    "        model = MyModel(nb_layers, kernel_size, hidden_dim)\n",
    "        \n",
    "        # Wraps model into ArchaiModel\n",
    "        return ArchaiModel(arch=model, archid=model.get_archid())\n",
    "\n",
    "    @overrides\n",
    "    def save_arch(self, model: ArchaiModel, file: str):\n",
    "        with open(file, 'w') as fp:\n",
    "            json.dump({\n",
    "                'nb_layers': model.arch.nb_layers,\n",
    "                'kernel_size': model.arch.kernel_size,\n",
    "                'hidden_dim': model.arch.hidden_dim\n",
    "            }, fp)\n",
    "\n",
    "    @overrides\n",
    "    def load_arch(self, file: str):\n",
    "        config = json.load(open(file))\n",
    "        model = MyModel(**config)\n",
    "        \n",
    "        return ArchaiModel(arch=model, archid=model.get_archid())\n",
    "\n",
    "    @overrides\n",
    "    def save_model_weights(self, model: ArchaiModel, file: str):\n",
    "        state_dict = model.arch.get_state_dict()\n",
    "        torch.save(state_dict, file)\n",
    "    \n",
    "    @overrides\n",
    "    def load_model_weights(self, model: ArchaiModel, file: str):\n",
    "        model.arch.load_state_dict(torch.load(file))\n",
    "\n",
    "    @overrides\n",
    "    def mutate(self, model_1: ArchaiModel) -> ArchaiModel:\n",
    "        config = {\n",
    "            'nb_layers': model_1.arch.nb_layers,\n",
    "            'kernel_size': model_1.arch.kernel_size,\n",
    "            'hidden_dim': model_1.arch.hidden_dim\n",
    "        }\n",
    "        \n",
    "        if self.rng.random() < 0.2:\n",
    "            config['nb_layers'] = self.rng.randint(self.min_layers, self.max_layers)\n",
    "        \n",
    "        if self.rng.random() < 0.2:\n",
    "            config['kernel_size'] = self.rng.choice(self.kernel_list)\n",
    "        \n",
    "        if self.rng.random() < 0.2:\n",
    "            config['hidden_dim'] = self.rng.choice(self.hidden_list)\n",
    "        \n",
    "        mutated_model = MyModel(**config)\n",
    "        \n",
    "        return ArchaiModel(\n",
    "            arch=mutated_model, archid=mutated_model.get_archid()\n",
    "        )\n",
    "    \n",
    "    @overrides\n",
    "    def crossover(self, model_list: List[ArchaiModel]) -> ArchaiModel:\n",
    "        model_1, model_2 = model_list[:2]\n",
    "        \n",
    "        new_config = {\n",
    "            'nb_layers': self.rng.choice([model_1.arch.nb_layers, model_2.arch.nb_layers]),\n",
    "            'kernel_size': self.rng.choice([model_1.arch.kernel_size, model_2.arch.kernel_size]),\n",
    "            'hidden_dim': self.rng.choice([model_1.arch.hidden_dim, model_2.arch.hidden_dim]),\n",
    "        }\n",
    "        \n",
    "        crossover_model = MyModel(**new_config)\n",
    "        \n",
    "        return ArchaiModel(\n",
    "            arch=crossover_model, archid=crossover_model.get_archid()\n",
    "        )\n",
    "    \n",
    "    @overrides\n",
    "    def encode(self, model: ArchaiModel) -> np.ndarray:\n",
    "        return np.array([model.arch.nb_layers, model.arch.kernel_size, model.arch.hidden_dim])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d2a667bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "ss = CNNSearchSpace(max_layers=10, kernel_list=[3, 5, 7], hidden_list=[32, 64, 128])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b7b5dd4e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ArchaiModel(\n",
       "\tarchid=(3, 7, 32), \n",
       "\tmetadata={}, \n",
       "\tarch=MyModel(\n",
       "  (model): Sequential(\n",
       "    (0): Conv2d(1, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
       "    (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (2): ReLU()\n",
       "    (3): Conv2d(32, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
       "    (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (5): ReLU()\n",
       "    (6): Conv2d(32, 32, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3))\n",
       "    (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
       "    (8): ReLU()\n",
       "    (9): AdaptiveAvgPool2d(output_size=(1, 1))\n",
       "    (10): Conv2d(32, 10, kernel_size=(1, 1), stride=(1, 1))\n",
       "  )\n",
       ")\n",
       ")"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = ss.random_sample()\n",
    "m"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24de6e98",
   "metadata": {},
   "source": [
    "## Dataset Provider"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cf68260",
   "metadata": {},
   "source": [
    "Datasets are represented in Archai throught the [`DatasetProvider`](../../reference/api/archai.discrete_search.api.rst) class. For this example, we will use the built-in dataset provider of the MNIST dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc94c3d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pathlib import Path\n",
    "from archai.cv.datasets.providers.mnist_provider import MnistProvider"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "058373ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset_provider = MnistProvider({'dataroot': Path.home() / 'dataroot'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67e836d0",
   "metadata": {},
   "source": [
    "We can get train/test PyTorch datasets from a DatasetProvider by calling `dataset_provider.get_datasets(load_train, load_test, transforms_train, transforms_test)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "10505074",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loads only the training set\n",
    "tr_d, _ = dataset_provider.get_datasets(load_train=True, load_test=False, transform_train=None, transform_test=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecace173",
   "metadata": {},
   "source": [
    "## Wrapping custom evaluation code"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "056973d6",
   "metadata": {},
   "source": [
    "We will evaluate our models using partial trainig validation accuracy as a proxy for final task performance. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "df253354",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search import ModelEvaluator\n",
    "from archai.discrete_search.evaluators.ray import RayParallelEvaluator\n",
    "\n",
    "from torchvision.transforms import Compose, ToTensor, Normalize\n",
    "from tqdm import tqdm\n",
    "import math\n",
    "\n",
    "\n",
    "class PartialTrainingValAccuracy(ModelEvaluator):\n",
    "    def __init__(self, training_epochs: float = 1.0, lr: float = 1e-4, device: str = 'cpu',\n",
    "                 progress_bar: bool = False):\n",
    "        self.training_epochs = training_epochs\n",
    "        self.device = device\n",
    "        self.lr = lr\n",
    "        self.preprocess = ToTensor()\n",
    "        self.progress_bar = progress_bar\n",
    "    \n",
    "    @overrides\n",
    "    def evaluate(self, model, dataset_provider, budget = None) -> float:\n",
    "        # Loads the dataset\n",
    "        tr_data, _ = dataset_provider.get_datasets(True, False, self.preprocess, None)\n",
    "        \n",
    "        # Train-validation split\n",
    "        tr_data, val_data = torch.utils.data.random_split(\n",
    "            tr_data, lengths=[len(tr_data) - 1_000, 1_000], \n",
    "            generator=torch.Generator().manual_seed(42)\n",
    "        )\n",
    "        \n",
    "        tr_dl = torch.utils.data.DataLoader(tr_data, batch_size=16, shuffle=True, num_workers=4)\n",
    "        val_dl = torch.utils.data.DataLoader(val_data, batch_size=16, shuffle=False, num_workers=4)\n",
    "        \n",
    "        # Training settings\n",
    "        optimizer = torch.optim.Adam(model.arch.parameters(), lr=self.lr)\n",
    "        criterion = nn.CrossEntropyLoss()\n",
    "        \n",
    "        model.arch.train()\n",
    "        model.arch.to(self.device)\n",
    "        \n",
    "        # Partial training\n",
    "        epoch_iter = range(math.ceil(self.training_epochs))\n",
    "        if self.progress_bar:\n",
    "            epoch_iter = tqdm(epoch_iter, desc=f'Training model {model.archid}')\n",
    "\n",
    "        for epoch_nb in epoch_iter:\n",
    "            # Early stops for fractional values of training epochs (e.g, 0.2)\n",
    "            early_stop = len(tr_dl) + 1\n",
    "            if 0 < (self.training_epochs - epoch_nb) < 1:\n",
    "                early_stop = int((self.training_epochs - epoch_nb) * len(tr_dl))\n",
    "            \n",
    "            for i, (x, y) in enumerate(tr_dl):\n",
    "                if i >= early_stop:\n",
    "                    break\n",
    "                \n",
    "                optimizer.zero_grad()\n",
    "                \n",
    "                pred = model.arch(x.to(self.device))\n",
    "                loss = criterion(pred, y.to(self.device))\n",
    "\n",
    "                loss.backward()\n",
    "                optimizer.step()\n",
    "        \n",
    "        # Evaluates final model\n",
    "        model.arch.eval()\n",
    "        \n",
    "        with torch.no_grad():\n",
    "            val_pred, val_target = [], []\n",
    "\n",
    "            for x, y in val_dl:\n",
    "                val_pred.append(model.arch(x.to(self.device)).argmax(axis=1).to('cpu'))\n",
    "                val_target.append(y.to('cpu'))\n",
    "\n",
    "            val_pred, val_target = torch.cat(val_pred, axis=0), torch.cat(val_target, axis=0)\n",
    "            val_acc = (val_pred.squeeze() == val_target.squeeze()).numpy().mean()\n",
    "\n",
    "        # Returns model to cpu\n",
    "        model.arch.cpu()\n",
    "        \n",
    "        return val_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19a74a59",
   "metadata": {},
   "source": [
    "Let's test our evaluator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "7e40e515",
   "metadata": {},
   "outputs": [],
   "source": [
    "partial_tr = PartialTrainingValAccuracy(training_epochs=0.001, progress_bar=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "689a2adf",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training model (5, 3, 64): 100%|██████████| 1/1 [00:00<00:00,  2.49it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.088"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "partial_tr.evaluate(ss.random_sample(), dataset_provider)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d6e6884",
   "metadata": {},
   "source": [
    "We can make this objective more efficient evaluating multiple architectures in parallel. To do that, we can use the `RayParallelObjective` wrapper mentioned in the [previous example](./objectives.ipynb):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f88c234b",
   "metadata": {},
   "outputs": [],
   "source": [
    "parallel_partial_tr = RayParallelEvaluator(partial_tr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaa3c2a5",
   "metadata": {},
   "source": [
    "Let's test our partial training objective sending two random architectures"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4adfc19b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-01-10 16:51:28,677\tINFO worker.py:1518 -- Started a local Ray instance.\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "parallel_partial_tr.send(ss.random_sample(), dataset_provider)\n",
    "parallel_partial_tr.send(ss.random_sample(), dataset_provider)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "a974a2b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Training model (7, 3, 32):   0%|          | 0/1 [00:00<?, ?it/s]\n",
      "Training model (8, 5, 128):   0%|          | 0/1 [00:00<?, ?it/s]\n",
      "Training model (7, 3, 32): 100%|██████████| 1/1 [00:00<00:00,  2.64it/s]\n",
      "Training model (8, 5, 128): 100%|██████████| 1/1 [00:07<00:00,  7.10s/it]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.088, 0.088]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "parallel_partial_tr.fetch_all()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3b548cb",
   "metadata": {},
   "source": [
    "To run the same objective distributing jobs across multiple GPUs, just set the `num_gpus` parameter from [ray.init](https://docs.ray.io/en/latest/ray-core/package-ref.html#ray-init):\n",
    "\n",
    "```python\n",
    "RayParallelObjective(\n",
    "    PartialTrainingValAccuracy(training_epochs=1),\n",
    "    num_gpus=0.5, # 2 jobs per gpu available\n",
    "    max_calls=1\n",
    ")\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c50b818",
   "metadata": {},
   "source": [
    "## Defining Search Objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c8ac88d",
   "metadata": {},
   "source": [
    "Search optimization objectives are specified using the `archai.discrete_search.SearchObjectives` class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "25095dc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search import SearchObjectives\n",
    "\n",
    "objectives = SearchObjectives()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "ccf6ddc3",
   "metadata": {},
   "source": [
    "### Adding objectives"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "9950bb3b",
   "metadata": {},
   "source": [
    "To add search objectives, we can use the `SearchObjectives.add_objective` method\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3060750e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search.evaluators.onnx_model import AvgOnnxLatency\n",
    "from archai.discrete_search.evaluators.torch_profiler import TorchFlops, TorchNumParameters\n",
    "\n",
    "objectives.add_objective(\n",
    "    # This name will be used in plots and reports\n",
    "    name='ONNX Latency (ms)',  \n",
    "    \n",
    "    # This is the evaluator we want to use\n",
    "    model_evaluator=AvgOnnxLatency(input_shape=(1, 1, 28, 28), num_trials=3),  \n",
    "    \n",
    "    # Optimization direction. `True` for maximization or `False` for minimization\n",
    "    higher_is_better=False,\n",
    "\n",
    "    # Used to sinalized if this evaluator is compute intensive.\n",
    "    compute_intensive=False \n",
    ")\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "92aaef34",
   "metadata": {},
   "source": [
    "The `compute_intensive` flag is used in some search algorithms to help increase search efficiency. For instance, search algorithms that use surrogate models may try to estimate the value of expensive objective functions of unseen architectures in certain situations, while cheap objectives (`compute_intensive=False`) will just be computed directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4cd5163c",
   "metadata": {},
   "outputs": [],
   "source": [
    "objectives.add_objective(\n",
    "    'FLOPs', TorchFlops(sample_args=(torch.randn(1, 1, 28, 28),)),\n",
    "    higher_is_better=False,\n",
    "    compute_intensive=False,\n",
    "    # We may optionally add a constraint. \n",
    "    # Architectures outside this range will be ignored by the search algorithm\n",
    "    constraint=(0.0, 1e9)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41127aed",
   "metadata": {},
   "source": [
    "Additionally, objectives that are cheap to evaluate (`compute_intensive=False`) may receive an optional `constraint` argument. Model candidates outside this range will\n",
    "be ignored by the search algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b058b47",
   "metadata": {},
   "source": [
    "We can evaluate cheap objectives calling `SearchObjectives.eval_cheap_objs(model_list, dataset_providers)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "df60ad54",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Calculating \"ONNX Latency (ms)\"...: 100%|██████████| 2/2 [00:00<00:00,  4.44it/s]\n",
      "Calculating \"FLOPs\"...: 100%|██████████| 2/2 [00:00<00:00, 20.09it/s]\n",
      "Gathering results from async objectives...: 0it [00:00, ?it/s]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'ONNX Latency (ms)': array([0.00098251, 0.00145262]),\n",
       " 'FLOPs': array([4.07179530e+08, 4.75242634e+08])}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives.eval_cheap_objs([ss.random_sample() for _ in range(2)], dataset_providers=None,\n",
    "                           progress_bar=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7ae043b",
   "metadata": {},
   "source": [
    "We can check if a model satisfies the constraints we added for the FLOPs objective by calling `SearchObjectives.validate_constraints(model_list, dataset_providers)` or `SearchObjectives.is_model_valid(ss.random_sample(), dataset_provider)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e99203fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'FLOPs': array([4.50410139e+09])}, array([], dtype=int64))"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = ss.random_sample()\n",
    "\n",
    "objectives.validate_constraints([m], dataset_providers=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "858a3966",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives.is_model_valid(m, dataset_provider=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ddc2911",
   "metadata": {},
   "source": [
    "By default, all objective and constraints evaluations are cached to prevent spending resources in the same architecture twice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fc3893e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{('ONNX Latency (ms)', '(8, 3, 64)', 'NoneType', None): 0.0009825120214372873,\n",
       " ('ONNX Latency (ms)', '(7, 7, 32)', 'NoneType', None): 0.001452620994920532,\n",
       " ('FLOPs', '(8, 3, 64)', 'NoneType', None): 407179530,\n",
       " ('FLOPs', '(7, 7, 32)', 'NoneType', None): 475242634,\n",
       " ('FLOPs', '(8, 5, 128)', 'NoneType', None): 4504101386}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The evaluation cached is built\n",
    "# using the tuple (obj_name, archid, dataset provider name, budget)\n",
    "objectives.cache"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fbcc6c7",
   "metadata": {},
   "source": [
    "Caching can be disabled setting `SearchObjectives(cache_objective_evaluation=False)`."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "ee596afe",
   "metadata": {},
   "source": [
    "Now, let's add the partial training objective we created before"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "50c463da",
   "metadata": {},
   "outputs": [],
   "source": [
    "objectives.add_objective(\n",
    "    'Partial training Validation Accuracy (1 epoch)',\n",
    "    RayParallelEvaluator(\n",
    "        PartialTrainingValAccuracy(training_epochs=1, device='cuda'),\n",
    "        num_gpus=0.5, # 2 jobs per gpu available\n",
    "        max_calls=1\n",
    "    ),\n",
    "    higher_is_better=True,\n",
    "    compute_intensive=True # This is a compute intensive evaluator\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33bfae1a",
   "metadata": {},
   "source": [
    "Expensive objectives can be evaluated using `SearchObjectives.eval_expensive_objs(model_list, dataset_providers)`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2ec34f6",
   "metadata": {},
   "source": [
    "Alternatively, all objectives (expensive and cheap) can also be evaluated using `SearchObjectives.eval_all_objs`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91205ae4",
   "metadata": {},
   "source": [
    "### Adding extra constraints"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec0e1653",
   "metadata": {},
   "source": [
    "Besides the constraint parameter from cheap objectives, it is also possible to add extra constraints that are not search objectives (and thus should not be optimized by NAS algorithms)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "74cf95ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search.evaluators.torch_profiler import TorchNumParameters\n",
    "\n",
    "objectives.add_constraint(\n",
    "    'Number of parameters',\n",
    "    TorchNumParameters(),\n",
    "    constraint=(0.0, 1e6)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "dc36366d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'Number of parameters': array([2874762.]), 'FLOPs': array([4.50410139e+09])},\n",
       " array([], dtype=int64))"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives.validate_constraints([m], None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "27a83b39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives.is_model_valid(m, None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae8bd85d",
   "metadata": {},
   "source": [
    "## Using a search algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a2a8fa7",
   "metadata": {},
   "source": [
    "Now that we know how to create and use search objectives, we can finally use a search algorithm do to Neural Architecture Search!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "457800f2",
   "metadata": {},
   "source": [
    "### Example: `EvolutionParetoSearch`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81b60964",
   "metadata": {},
   "source": [
    "Let's start with an evolutionary-based search algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1b66c7e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search.algos.evolution_pareto import EvolutionParetoSearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d5bb8efe",
   "metadata": {},
   "outputs": [],
   "source": [
    "algo = EvolutionParetoSearch(\n",
    "    ss, objectives, dataset_provider, \n",
    "    output_dir='./out_evo',\n",
    "    num_iters=5, num_crossovers=5,\n",
    "    mutations_per_parent=2,\n",
    "    max_unseen_population=10\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "7b0d4117",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "13:56 Using 10 random architectures as the initial population\n",
      "13:56 starting evolution pareto iter 0\n",
      "13:56 iter 0: calculating search objectives ['ONNX Latency (ms)', 'FLOPs', 'Partial training Validation Accuracy (1 epoch)'] for 10 models\n",
      "13:57 iter 0: updating the pareto\n",
      "13:57 iter 0: found 7 members\n",
      "13:57 iter 0: chose 7 parents\n",
      "Mutating parents: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 7/7 [00:00<00:00, 25.16it/s]\n",
      "13:57 iter 0: mutation yielded 12 new models\n",
      "13:57 iter 0: crossover yielded 1 new models\n",
      "13:57 iter 0: total unseen population 18\n",
      "13:57 iter 0: total unseen population after `max_unseen_population` restriction 10\n",
      "13:57 starting evolution pareto iter 1\n",
      "13:57 iter 1: calculating search objectives ['ONNX Latency (ms)', 'FLOPs', 'Partial training Validation Accuracy (1 epoch)'] for 10 models\n",
      "13:58 iter 1: updating the pareto\n",
      "13:58 iter 1: found 12 members\n",
      "13:58 iter 1: chose 12 parents\n",
      "Mutating parents: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 12/12 [00:00<00:00, 12.74it/s]\n",
      "13:58 iter 1: mutation yielded 15 new models\n",
      "13:58 iter 1: crossover yielded 0 new models\n",
      "13:58 iter 1: total unseen population 20\n",
      "13:58 iter 1: total unseen population after `max_unseen_population` restriction 10\n",
      "13:58 starting evolution pareto iter 2\n",
      "13:58 iter 2: calculating search objectives ['ONNX Latency (ms)', 'FLOPs', 'Partial training Validation Accuracy (1 epoch)'] for 10 models\n",
      "13:59 iter 2: updating the pareto\n",
      "13:59 iter 2: found 18 members\n",
      "13:59 iter 2: chose 18 parents\n",
      "Mutating parents: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 18/18 [00:01<00:00, 15.72it/s]\n",
      "13:59 iter 2: mutation yielded 18 new models\n",
      "13:59 iter 2: crossover yielded 1 new models\n",
      "13:59 iter 2: total unseen population 24\n",
      "13:59 iter 2: total unseen population after `max_unseen_population` restriction 10\n",
      "13:59 starting evolution pareto iter 3\n",
      "13:59 iter 3: calculating search objectives ['ONNX Latency (ms)', 'FLOPs', 'Partial training Validation Accuracy (1 epoch)'] for 10 models\n",
      "14:00 iter 3: updating the pareto\n",
      "14:00 iter 3: found 20 members\n",
      "14:00 iter 3: chose 20 parents\n",
      "Mutating parents: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 20/20 [00:00<00:00, 29.05it/s]\n",
      "14:00 iter 3: mutation yielded 21 new models\n",
      "14:00 iter 3: crossover yielded 2 new models\n",
      "14:00 iter 3: total unseen population 28\n",
      "14:00 iter 3: total unseen population after `max_unseen_population` restriction 10\n",
      "14:00 starting evolution pareto iter 4\n",
      "14:00 iter 4: calculating search objectives ['ONNX Latency (ms)', 'FLOPs', 'Partial training Validation Accuracy (1 epoch)'] for 10 models\n",
      "14:01 iter 4: updating the pareto\n",
      "14:01 iter 4: found 24 members\n",
      "14:01 iter 4: chose 24 parents\n",
      "Mutating parents: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 24/24 [00:00<00:00, 24.93it/s]\n",
      "14:01 iter 4: mutation yielded 17 new models\n",
      "14:01 iter 4: crossover yielded 1 new models\n",
      "14:01 iter 4: total unseen population 23\n",
      "14:01 iter 4: total unseen population after `max_unseen_population` restriction 10\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results = algo.search()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44658a70",
   "metadata": {},
   "source": [
    "By default all algorithms will save the final pareto architectures `{output_dir}/pareto_models_iter_*/`, pareto evolution plots `pareto_*.png` and search state tables with all the results `{output_dir}/search_state_*.csv`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "248462b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log.log\r\n",
      "pareto_FLOPs_vs_Partial_training_Validation_Accuracy_1_epoch.png\r\n",
      "pareto_models_iter_1\r\n",
      "pareto_models_iter_2\r\n",
      "pareto_models_iter_3\r\n",
      "pareto_models_iter_4\r\n",
      "pareto_models_iter_5\r\n",
      "pareto_ONNX_Latency_ms_vs_FLOPs.png\r\n",
      "pareto_ONNX_Latency_ms_vs_Partial_training_Validation_Accuracy_1_epoch.png\r\n",
      "search_state_1.csv\r\n",
      "search_state_2.csv\r\n",
      "search_state_3.csv\r\n",
      "search_state_4.csv\r\n",
      "search_state_5.csv\r\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "!ls ./out_evo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "384e9a76",
   "metadata": {},
   "source": [
    "It is also possible to get information from the `search_results` object directly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2923ca7e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results.plot_2d_pareto_evolution(('ONNX Latency (ms)', 'Partial training Validation Accuracy (1 epoch)'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "169bdce1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>archid</th>\n",
       "      <th>Partial training Validation Accuracy (1 epoch)</th>\n",
       "      <th>ONNX Latency (ms)</th>\n",
       "      <th>FLOPs</th>\n",
       "      <th>parent</th>\n",
       "      <th>parents</th>\n",
       "      <th>iteration_num</th>\n",
       "      <th>Search walltime (hours)</th>\n",
       "      <th>is_pareto</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>(1, 3, 64)</td>\n",
       "      <td>0.264</td>\n",
       "      <td>0.000239</td>\n",
       "      <td>706762.0</td>\n",
       "      <td>(1, 7, 128)</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>0.086072</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>(1, 5, 32)</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.000251</td>\n",
       "      <td>754794.0</td>\n",
       "      <td>(1, 5, 128)</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>0.032674</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>(1, 7, 32)</td>\n",
       "      <td>0.310</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>1356906.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>(1, 7, 64)</td>\n",
       "      <td>0.326</td>\n",
       "      <td>0.000236</td>\n",
       "      <td>2713802.0</td>\n",
       "      <td>(9, 3, 64)</td>\n",
       "      <td>None</td>\n",
       "      <td>3</td>\n",
       "      <td>0.070278</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(1, 5, 128)</td>\n",
       "      <td>0.335</td>\n",
       "      <td>0.000296</td>\n",
       "      <td>3019146.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(1, 7, 128)</td>\n",
       "      <td>0.385</td>\n",
       "      <td>0.000249</td>\n",
       "      <td>5427594.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>(2, 3, 32)</td>\n",
       "      <td>0.456</td>\n",
       "      <td>0.000285</td>\n",
       "      <td>7679082.0</td>\n",
       "      <td>(9, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>3</td>\n",
       "      <td>0.070278</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>(2, 3, 64)</td>\n",
       "      <td>0.569</td>\n",
       "      <td>0.000370</td>\n",
       "      <td>29808842.0</td>\n",
       "      <td>(2, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>0.086072</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>(3, 3, 32)</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.000445</td>\n",
       "      <td>15004778.0</td>\n",
       "      <td>(6, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>1</td>\n",
       "      <td>0.032674</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>(4, 3, 32)</td>\n",
       "      <td>0.829</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>22330474.0</td>\n",
       "      <td>(6, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>(2, 7, 32)</td>\n",
       "      <td>0.886</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>40795242.0</td>\n",
       "      <td>(9, 7, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>(5, 3, 32)</td>\n",
       "      <td>0.922</td>\n",
       "      <td>0.000627</td>\n",
       "      <td>29656170.0</td>\n",
       "      <td>(4, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>3</td>\n",
       "      <td>0.070278</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>(3, 5, 32)</td>\n",
       "      <td>0.946</td>\n",
       "      <td>0.000479</td>\n",
       "      <td>41096298.0</td>\n",
       "      <td>(3, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>(6, 3, 32)</td>\n",
       "      <td>0.949</td>\n",
       "      <td>0.000722</td>\n",
       "      <td>36981866.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>(7, 3, 32)</td>\n",
       "      <td>0.956</td>\n",
       "      <td>0.000851</td>\n",
       "      <td>44307562.0</td>\n",
       "      <td>(9, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>(4, 5, 32)</td>\n",
       "      <td>0.974</td>\n",
       "      <td>0.000551</td>\n",
       "      <td>61267050.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>(8, 3, 32)</td>\n",
       "      <td>0.975</td>\n",
       "      <td>0.000872</td>\n",
       "      <td>51633258.0</td>\n",
       "      <td>(9, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>0.086072</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>(6, 5, 32)</td>\n",
       "      <td>0.975</td>\n",
       "      <td>0.000726</td>\n",
       "      <td>101608554.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>(7, 5, 32)</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.000860</td>\n",
       "      <td>121779306.0</td>\n",
       "      <td>(6, 5, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>0.086072</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>(10, 3, 32)</td>\n",
       "      <td>0.983</td>\n",
       "      <td>0.001035</td>\n",
       "      <td>66284650.0</td>\n",
       "      <td>(10, 5, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>3</td>\n",
       "      <td>0.070278</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(4, 5, 64)</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.000885</td>\n",
       "      <td>242956490.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016957</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>(8, 5, 32)</td>\n",
       "      <td>0.987</td>\n",
       "      <td>0.000919</td>\n",
       "      <td>141950058.0</td>\n",
       "      <td>(6, 5, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "      <td>0.086072</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>(10, 5, 32)</td>\n",
       "      <td>0.988</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>182291562.0</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>(9, 3, 64)</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.001337</td>\n",
       "      <td>233523402.0</td>\n",
       "      <td>(9, 3, 32)</td>\n",
       "      <td>None</td>\n",
       "      <td>2</td>\n",
       "      <td>0.052575</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         archid  Partial training Validation Accuracy (1 epoch)  ONNX Latency (ms)        FLOPs       parent parents  iteration_num  Search walltime (hours)  is_pareto\n",
       "46   (1, 3, 64)                                           0.264           0.000239     706762.0  (1, 7, 128)    None              4                 0.086072       True\n",
       "10   (1, 5, 32)                                           0.274           0.000251     754794.0  (1, 5, 128)    None              1                 0.032674       True\n",
       "4    (1, 7, 32)                                           0.310           0.000208    1356906.0         None    None              0                 0.016957       True\n",
       "35   (1, 7, 64)                                           0.326           0.000236    2713802.0   (9, 3, 64)    None              3                 0.070278       True\n",
       "7   (1, 5, 128)                                           0.335           0.000296    3019146.0         None    None              0                 0.016957       True\n",
       "2   (1, 7, 128)                                           0.385           0.000249    5427594.0         None    None              0                 0.016957       True\n",
       "39   (2, 3, 32)                                           0.456           0.000285    7679082.0   (9, 3, 32)    None              3                 0.070278       True\n",
       "48   (2, 3, 64)                                           0.569           0.000370   29808842.0   (2, 3, 32)    None              4                 0.086072       True\n",
       "15   (3, 3, 32)                                           0.710           0.000445   15004778.0   (6, 3, 32)    None              1                 0.032674       True\n",
       "22   (4, 3, 32)                                           0.829           0.000490   22330474.0   (6, 3, 32)    None              2                 0.052575       True\n",
       "21   (2, 7, 32)                                           0.886           0.000458   40795242.0   (9, 7, 32)    None              2                 0.052575       True\n",
       "31   (5, 3, 32)                                           0.922           0.000627   29656170.0   (4, 3, 32)    None              3                 0.070278       True\n",
       "26   (3, 5, 32)                                           0.946           0.000479   41096298.0   (3, 3, 32)    None              2                 0.052575       True\n",
       "1    (6, 3, 32)                                           0.949           0.000722   36981866.0         None    None              0                 0.016957       True\n",
       "29   (7, 3, 32)                                           0.956           0.000851   44307562.0   (9, 3, 32)    None              2                 0.052575       True\n",
       "5    (4, 5, 32)                                           0.974           0.000551   61267050.0         None    None              0                 0.016957       True\n",
       "49   (8, 3, 32)                                           0.975           0.000872   51633258.0   (9, 3, 32)    None              4                 0.086072       True\n",
       "28   (6, 5, 32)                                           0.975           0.000726  101608554.0         None    None              2                 0.052575       True\n",
       "44   (7, 5, 32)                                           0.980           0.000860  121779306.0   (6, 5, 32)    None              4                 0.086072       True\n",
       "30  (10, 3, 32)                                           0.983           0.001035   66284650.0  (10, 5, 32)    None              3                 0.070278       True\n",
       "6    (4, 5, 64)                                           0.986           0.000885  242956490.0         None    None              0                 0.016957       True\n",
       "40   (8, 5, 32)                                           0.987           0.000919  141950058.0   (6, 5, 32)    None              4                 0.086072       True\n",
       "25  (10, 5, 32)                                           0.988           0.001160  182291562.0         None    None              2                 0.052575       True\n",
       "20   (9, 3, 64)                                           0.991           0.001337  233523402.0   (9, 3, 32)    None              2                 0.052575       True"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results.get_search_state_df().query('is_pareto').sort_values('Partial training Validation Accuracy (1 epoch)')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "364fdfd0",
   "metadata": {},
   "source": [
    "Since our search space is also compatible with Bayesian Optimization algorithms, let's try more sophisticated algorithm like MO-BANANAS. \n",
    "\n",
    "MO-BANANAS will progressively train a surrogate model based on the data gathered during search. This surrogate model will be used to predict the result of expensive objective function evaluations and will try to determine what are the best possible architectures according to the surrogate model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "6617b53c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from archai.discrete_search.algos.bananas import MoBananasSearch"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "db035881",
   "metadata": {},
   "outputs": [],
   "source": [
    "algo2 = MoBananasSearch(\n",
    "    ss, objectives, dataset_provider, \n",
    "    output_dir='./out_bananas', \n",
    "    num_iters=5, mutations_per_parent=5,\n",
    "    num_candidates=20\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d50b0279",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "14:01 Starting iteration 0\n",
      "14:01 Evaluating objectives for 10 architectures\n",
      "14:02 Updating surrogate model...\n",
      "Training DNN Ensemble...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:26<00:00,  5.39s/it]\n",
      "/home/pkauffmann/archai/archai/discrete_search/utils/multi_objective.py:53: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  frontiers = np.array(\n",
      "14:02 Generating mutations for 10 parent architectures...\n",
      "14:02 Found 36 new architectures satisfying constraints.\n",
      "14:02 Predicting ['Partial training Validation Accuracy (1 epoch)'] for new architectures using surrogate model\n",
      "14:02 Calculating cheap objectives {'ONNX Latency (ms)': {'objective': <archai.discrete_search.evaluators.onnx_model.AvgOnnxLatency object at 0x7fd1fc88c760>, 'higher_is_better': False, 'constraint': None}, 'FLOPs': {'objective': <archai.discrete_search.evaluators.torch_model.TensorwatchStat object at 0x7fd1fc88c700>, 'higher_is_better': False, 'constraint': (0.0, 1000000000.0)}} for new architectures\n",
      "14:02 Best 20 candidate architectures were selected for the next iteration\n",
      "14:02 Starting iteration 1\n",
      "14:02 Evaluating objectives for 20 architectures\n",
      "14:03 Updating surrogate model...\n",
      "Training DNN Ensemble...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:27<00:00,  5.42s/it]\n",
      "/home/pkauffmann/archai/archai/discrete_search/utils/multi_objective.py:53: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  frontiers = np.array(\n",
      "14:04 Generating mutations for 10 parent architectures...\n",
      "14:04 Found 26 new architectures satisfying constraints.\n",
      "14:04 Predicting ['Partial training Validation Accuracy (1 epoch)'] for new architectures using surrogate model\n",
      "14:04 Calculating cheap objectives {'ONNX Latency (ms)': {'objective': <archai.discrete_search.evaluators.onnx_model.AvgOnnxLatency object at 0x7fd1fc88c760>, 'higher_is_better': False, 'constraint': None}, 'FLOPs': {'objective': <archai.discrete_search.evaluators.torch_model.TensorwatchStat object at 0x7fd1fc88c700>, 'higher_is_better': False, 'constraint': (0.0, 1000000000.0)}} for new architectures\n",
      "14:04 Best 20 candidate architectures were selected for the next iteration\n",
      "14:04 Starting iteration 2\n",
      "14:04 Evaluating objectives for 20 architectures\n",
      "14:05 Updating surrogate model...\n",
      "Training DNN Ensemble...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:26<00:00,  5.40s/it]\n",
      "/home/pkauffmann/archai/archai/discrete_search/utils/multi_objective.py:53: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  frontiers = np.array(\n",
      "14:05 Generating mutations for 10 parent architectures...\n",
      "14:05 Found 6 new architectures satisfying constraints.\n",
      "14:05 Predicting ['Partial training Validation Accuracy (1 epoch)'] for new architectures using surrogate model\n",
      "14:05 Calculating cheap objectives {'ONNX Latency (ms)': {'objective': <archai.discrete_search.evaluators.onnx_model.AvgOnnxLatency object at 0x7fd1fc88c760>, 'higher_is_better': False, 'constraint': None}, 'FLOPs': {'objective': <archai.discrete_search.evaluators.torch_model.TensorwatchStat object at 0x7fd1fc88c700>, 'higher_is_better': False, 'constraint': (0.0, 1000000000.0)}} for new architectures\n",
      "14:05 Best 20 candidate architectures were selected for the next iteration\n",
      "14:05 Starting iteration 3\n",
      "14:05 Evaluating objectives for 6 architectures\n",
      "14:06 Updating surrogate model...\n",
      "Training DNN Ensemble...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:26<00:00,  5.31s/it]\n",
      "/home/pkauffmann/archai/archai/discrete_search/utils/multi_objective.py:53: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  frontiers = np.array(\n",
      "14:06 Generating mutations for 10 parent architectures...\n",
      "14:06 Found 1 new architectures satisfying constraints.\n",
      "14:06 Predicting ['Partial training Validation Accuracy (1 epoch)'] for new architectures using surrogate model\n",
      "14:06 Calculating cheap objectives {'ONNX Latency (ms)': {'objective': <archai.discrete_search.evaluators.onnx_model.AvgOnnxLatency object at 0x7fd1fc88c760>, 'higher_is_better': False, 'constraint': None}, 'FLOPs': {'objective': <archai.discrete_search.evaluators.torch_model.TensorwatchStat object at 0x7fd1fc88c700>, 'higher_is_better': False, 'constraint': (0.0, 1000000000.0)}} for new architectures\n",
      "14:06 Best 20 candidate architectures were selected for the next iteration\n",
      "14:06 Starting iteration 4\n",
      "14:06 Evaluating objectives for 1 architectures\n",
      "14:06 Updating surrogate model...\n",
      "Training DNN Ensemble...: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 5/5 [00:26<00:00,  5.26s/it]\n",
      "/home/pkauffmann/archai/archai/discrete_search/utils/multi_objective.py:53: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
      "  frontiers = np.array(\n",
      "14:07 Generating mutations for 10 parent architectures...\n",
      "14:07 Found 3 new architectures satisfying constraints.\n",
      "14:07 Predicting ['Partial training Validation Accuracy (1 epoch)'] for new architectures using surrogate model\n",
      "14:07 Calculating cheap objectives {'ONNX Latency (ms)': {'objective': <archai.discrete_search.evaluators.onnx_model.AvgOnnxLatency object at 0x7fd1fc88c760>, 'higher_is_better': False, 'constraint': None}, 'FLOPs': {'objective': <archai.discrete_search.evaluators.torch_model.TensorwatchStat object at 0x7fd1fc88c700>, 'higher_is_better': False, 'constraint': (0.0, 1000000000.0)}} for new architectures\n",
      "14:07 Best 20 candidate architectures were selected for the next iteration\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results2 = algo2.search()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b90c31a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "log.log\r\n",
      "pareto_FLOPs_vs_Partial_training_Validation_Accuracy_1_epoch.png\r\n",
      "pareto_ONNX_Latency_ms_vs_FLOPs.png\r\n",
      "pareto_ONNX_Latency_ms_vs_Partial_training_Validation_Accuracy_1_epoch.png\r\n",
      "search_state_0.csv\r\n",
      "search_state_1.csv\r\n",
      "search_state_2.csv\r\n",
      "search_state_3.csv\r\n",
      "search_state_4.csv\r\n"
     ]
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "!ls ./out_bananas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "04d165b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results2.plot_2d_pareto_evolution(('ONNX Latency (ms)', 'Partial training Validation Accuracy (1 epoch)'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2df08e8",
   "metadata": {},
   "source": [
    "MO-BANANAS will also save the predictive mean and variance of the expensive objectives during that iteration ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a9bbcc8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>archid</th>\n",
       "      <th>Partial training Validation Accuracy (1 epoch)</th>\n",
       "      <th>ONNX Latency (ms)</th>\n",
       "      <th>FLOPs</th>\n",
       "      <th>iteration_num</th>\n",
       "      <th>Predicted Partial training Validation Accuracy (1 epoch) mean</th>\n",
       "      <th>Predicted Partial training Validation Accuracy (1 epoch) var</th>\n",
       "      <th>Search walltime (hours)</th>\n",
       "      <th>is_pareto</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>(1, 3, 32)</td>\n",
       "      <td>0.248</td>\n",
       "      <td>0.000254</td>\n",
       "      <td>353386.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.248418</td>\n",
       "      <td>2.047968e-03</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>(1, 3, 64)</td>\n",
       "      <td>0.264</td>\n",
       "      <td>0.000239</td>\n",
       "      <td>706762.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.520867</td>\n",
       "      <td>2.725258e-04</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>(1, 5, 32)</td>\n",
       "      <td>0.274</td>\n",
       "      <td>0.000251</td>\n",
       "      <td>754794.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.524827</td>\n",
       "      <td>2.408193e-03</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>(1, 7, 32)</td>\n",
       "      <td>0.310</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>1356906.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.750090</td>\n",
       "      <td>2.623198e-04</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>(1, 7, 64)</td>\n",
       "      <td>0.326</td>\n",
       "      <td>0.000236</td>\n",
       "      <td>2713802.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.558949</td>\n",
       "      <td>1.281874e-03</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>(1, 5, 128)</td>\n",
       "      <td>0.335</td>\n",
       "      <td>0.000296</td>\n",
       "      <td>3019146.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.305024</td>\n",
       "      <td>7.075308e-04</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>(1, 7, 128)</td>\n",
       "      <td>0.385</td>\n",
       "      <td>0.000249</td>\n",
       "      <td>5427594.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.009741</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>(2, 3, 32)</td>\n",
       "      <td>0.456</td>\n",
       "      <td>0.000285</td>\n",
       "      <td>7679082.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.459846</td>\n",
       "      <td>1.940939e-03</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>(2, 3, 64)</td>\n",
       "      <td>0.569</td>\n",
       "      <td>0.000370</td>\n",
       "      <td>29808842.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.693631</td>\n",
       "      <td>3.133334e-05</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>(2, 5, 32)</td>\n",
       "      <td>0.666</td>\n",
       "      <td>0.000389</td>\n",
       "      <td>20925546.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.607475</td>\n",
       "      <td>8.238424e-04</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>(3, 3, 32)</td>\n",
       "      <td>0.710</td>\n",
       "      <td>0.000445</td>\n",
       "      <td>15004778.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.679987</td>\n",
       "      <td>1.583403e-03</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>(4, 3, 32)</td>\n",
       "      <td>0.829</td>\n",
       "      <td>0.000490</td>\n",
       "      <td>22330474.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.939183</td>\n",
       "      <td>1.354675e-04</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>(2, 7, 32)</td>\n",
       "      <td>0.886</td>\n",
       "      <td>0.000458</td>\n",
       "      <td>40795242.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.009741</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>(5, 3, 32)</td>\n",
       "      <td>0.922</td>\n",
       "      <td>0.000627</td>\n",
       "      <td>29656170.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.945611</td>\n",
       "      <td>8.060229e-06</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>(3, 5, 32)</td>\n",
       "      <td>0.946</td>\n",
       "      <td>0.000479</td>\n",
       "      <td>41096298.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.842660</td>\n",
       "      <td>5.665877e-04</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>(6, 3, 32)</td>\n",
       "      <td>0.949</td>\n",
       "      <td>0.000722</td>\n",
       "      <td>36981866.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.009741</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>(7, 3, 32)</td>\n",
       "      <td>0.956</td>\n",
       "      <td>0.000851</td>\n",
       "      <td>44307562.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.963334</td>\n",
       "      <td>4.732862e-07</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>(4, 5, 32)</td>\n",
       "      <td>0.974</td>\n",
       "      <td>0.000551</td>\n",
       "      <td>61267050.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.009741</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>(8, 3, 32)</td>\n",
       "      <td>0.975</td>\n",
       "      <td>0.000872</td>\n",
       "      <td>51633258.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.969070</td>\n",
       "      <td>5.998997e-05</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>(6, 5, 32)</td>\n",
       "      <td>0.975</td>\n",
       "      <td>0.000726</td>\n",
       "      <td>101608554.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.974126</td>\n",
       "      <td>5.820624e-05</td>\n",
       "      <td>0.035050</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>(7, 5, 32)</td>\n",
       "      <td>0.980</td>\n",
       "      <td>0.000860</td>\n",
       "      <td>121779306.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.980158</td>\n",
       "      <td>6.198977e-07</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>(10, 3, 32)</td>\n",
       "      <td>0.983</td>\n",
       "      <td>0.001035</td>\n",
       "      <td>66284650.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.994888</td>\n",
       "      <td>3.606799e-06</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>(6, 3, 64)</td>\n",
       "      <td>0.983</td>\n",
       "      <td>0.000895</td>\n",
       "      <td>146217162.0</td>\n",
       "      <td>3</td>\n",
       "      <td>0.976682</td>\n",
       "      <td>7.886449e-07</td>\n",
       "      <td>0.079053</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>(4, 5, 64)</td>\n",
       "      <td>0.986</td>\n",
       "      <td>0.000885</td>\n",
       "      <td>242956490.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.961790</td>\n",
       "      <td>4.393400e-05</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>(8, 5, 32)</td>\n",
       "      <td>0.987</td>\n",
       "      <td>0.000919</td>\n",
       "      <td>141950058.0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.009741</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>(10, 5, 32)</td>\n",
       "      <td>0.988</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>182291562.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.996126</td>\n",
       "      <td>6.905550e-06</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>(9, 3, 64)</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.001337</td>\n",
       "      <td>233523402.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.008927</td>\n",
       "      <td>1.038860e-04</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>(10, 3, 64)</td>\n",
       "      <td>0.991</td>\n",
       "      <td>0.001333</td>\n",
       "      <td>262625482.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.019735</td>\n",
       "      <td>1.448977e-04</td>\n",
       "      <td>0.059447</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         archid  Partial training Validation Accuracy (1 epoch)  ONNX Latency (ms)        FLOPs  iteration_num  Predicted Partial training Validation Accuracy (1 epoch) mean  Predicted Partial training Validation Accuracy (1 epoch) var  Search walltime (hours)  is_pareto\n",
       "37   (1, 3, 32)                                           0.248           0.000254     353386.0              2                                           0.248418                                                   2.047968e-03                            0.059447       True\n",
       "16   (1, 3, 64)                                           0.264           0.000239     706762.0              1                                           0.520867                                                   2.725258e-04                            0.035050       True\n",
       "10   (1, 5, 32)                                           0.274           0.000251     754794.0              1                                           0.524827                                                   2.408193e-03                            0.035050       True\n",
       "19   (1, 7, 32)                                           0.310           0.000208    1356906.0              1                                           0.750090                                                   2.623198e-04                            0.035050       True\n",
       "26   (1, 7, 64)                                           0.326           0.000236    2713802.0              1                                           0.558949                                                   1.281874e-03                            0.035050       True\n",
       "32  (1, 5, 128)                                           0.335           0.000296    3019146.0              2                                           0.305024                                                   7.075308e-04                            0.059447       True\n",
       "2   (1, 7, 128)                                           0.385           0.000249    5427594.0              0                                                NaN                                                            NaN                            0.009741       True\n",
       "36   (2, 3, 32)                                           0.456           0.000285    7679082.0              2                                           0.459846                                                   1.940939e-03                            0.059447       True\n",
       "28   (2, 3, 64)                                           0.569           0.000370   29808842.0              1                                           0.693631                                                   3.133334e-05                            0.035050       True\n",
       "35   (2, 5, 32)                                           0.666           0.000389   20925546.0              2                                           0.607475                                                   8.238424e-04                            0.059447       True\n",
       "33   (3, 3, 32)                                           0.710           0.000445   15004778.0              2                                           0.679987                                                   1.583403e-03                            0.059447       True\n",
       "12   (4, 3, 32)                                           0.829           0.000490   22330474.0              1                                           0.939183                                                   1.354675e-04                            0.035050       True\n",
       "7    (2, 7, 32)                                           0.886           0.000458   40795242.0              0                                                NaN                                                            NaN                            0.009741       True\n",
       "15   (5, 3, 32)                                           0.922           0.000627   29656170.0              1                                           0.945611                                                   8.060229e-06                            0.035050       True\n",
       "21   (3, 5, 32)                                           0.946           0.000479   41096298.0              1                                           0.842660                                                   5.665877e-04                            0.035050       True\n",
       "0    (6, 3, 32)                                           0.949           0.000722   36981866.0              0                                                NaN                                                            NaN                            0.009741       True\n",
       "39   (7, 3, 32)                                           0.956           0.000851   44307562.0              2                                           0.963334                                                   4.732862e-07                            0.059447       True\n",
       "6    (4, 5, 32)                                           0.974           0.000551   61267050.0              0                                                NaN                                                            NaN                            0.009741       True\n",
       "23   (8, 3, 32)                                           0.975           0.000872   51633258.0              1                                           0.969070                                                   5.998997e-05                            0.035050       True\n",
       "22   (6, 5, 32)                                           0.975           0.000726  101608554.0              1                                           0.974126                                                   5.820624e-05                            0.035050       True\n",
       "34   (7, 5, 32)                                           0.980           0.000860  121779306.0              2                                           0.980158                                                   6.198977e-07                            0.059447       True\n",
       "40  (10, 3, 32)                                           0.983           0.001035   66284650.0              2                                           0.994888                                                   3.606799e-06                            0.059447       True\n",
       "50   (6, 3, 64)                                           0.983           0.000895  146217162.0              3                                           0.976682                                                   7.886449e-07                            0.079053       True\n",
       "44   (4, 5, 64)                                           0.986           0.000885  242956490.0              2                                           0.961790                                                   4.393400e-05                            0.059447       True\n",
       "3    (8, 5, 32)                                           0.987           0.000919  141950058.0              0                                                NaN                                                            NaN                            0.009741       True\n",
       "31  (10, 5, 32)                                           0.988           0.001160  182291562.0              2                                           0.996126                                                   6.905550e-06                            0.059447       True\n",
       "38   (9, 3, 64)                                           0.991           0.001337  233523402.0              2                                           1.008927                                                   1.038860e-04                            0.059447       True\n",
       "30  (10, 3, 64)                                           0.991           0.001333  262625482.0              2                                           1.019735                                                   1.448977e-04                            0.059447       True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# NBVAL_SKIP\n",
    "search_results2.get_search_state_df().query('is_pareto').sort_values('Partial training Validation Accuracy (1 epoch)')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "archai",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  },
  "vscode": {
   "interpreter": {
    "hash": "9fbf74c2a5b2277518aab34976c77c13dbb1703a6ac8dc7322f20b113fdc89e6"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
